var crypto = require('crypto');
var rand = require('csprng');
var mongoose = require('mongoose');
var events = require('config/eventmodel');
var group = require('config/groupmodel');
var user = require('config/usermodel');


exports.create = function(eventName, eventDescription,eventAdminEmail,eventAdminName,eventRequestsName,eventRequests,eventMembers, groupName, venue,eventDate,eventTime, callback) {

    var token = crypto.createHash('sha512').update(eventName + eventAdminEmail + rand).digest("hex");

    var new_event = new events({
        token: token,
        eventName: eventName,
        eventDescription: eventDescription,
        eventAdminEmail: eventAdminEmail,
        eventAdminName: eventAdminName,
        eventMembers:eventMembers,
        eventMembersName:eventAdminName,
        eventRequestsName:eventRequestsName,
        eventRequests:eventRequests,
        groupName:groupName,
        venue:venue,
        eventDate:eventDate,
        eventTime:eventTime,

    });

    events.find({
        token: token
    }, function(err, groups) {

        var len = groups.length;

        if (len == 0) {
            new_event.save(function(err) {

                callback({
                    'response': "Event Sucessfully Created",
                    'res': true
                });

            });

            console.log("okkk"+eventAdminEmail);
            user.find({
                email: eventAdminEmail
            }, function(err, users) {
                console.log("eventName--->"+eventName);
                users[0].adminEvents.push(token);
                users[0].adminEventsName.push(eventName);
                users[0].events.push(token);
                users[0].save(function(err) {
                    console.log("User saved");
                });
            });

            //console.log("groupMemberRequestEmail"+groupMemberRequestEmail);
            for (var requestEvents in eventRequests) {
                console.log("requestMembers" +eventRequests[requestEvents]);
                user.find({
                    email: eventRequests[requestEvents]
                }, function(err, users) {
                    console.log("users found"+err+"::::"+users.length);
                    users[0].eventRequests.push(token);
                    users[0].save(function(err) {
                        
                    });
                });
            }
        } else {

            callback({
                'response': "Event already exists",
                'res': false
            });

        }
    });
}
exports.getEventDetails = function(eventToken,callback) {

     events.find({
                token: eventToken
            }, function(err, events) {

                console.log('eventMembers'+events[0].eventMembers);
                
                callback({
                    'response': "Event Name found",
                    'res': true,
                    'eventName': events[0].eventName,
                    'eventAdminName':events[0].eventAdminName,
                    'eventAdminEmail':events[0].eventAdminEmail,
                    'eventDescription': events[0].eventDescription,
                    'groupName': events[0].groupName,
                    'eventDate':events[0].eventDate,
                    'eventTime':events[0].eventTime,
                    'venue':events[0].venue,
                    'eventMembers':events[0].eventMembers
                });
            });
}

exports.update = function(eventName, eventAdminEmail, userEmail,userName,updateAction, callback) {

    var eventToken = crypto.createHash('sha512').update(eventName + eventAdminEmail + rand).digest("hex");

    switch (updateAction) {
        case "Join Event":
            user.find({
                email: userEmail
            }, function(err, users) {
                var temp = users[0].eventRequests.indexOf(eventToken);
                users[0].eventRequests.splice(temp, 1);
                users[0].events.push(eventToken);
                users[0].save();
            });

            events.find({
                token: eventToken
            }, function(err, events) {
                console.log("error11111"+eventToken);
                var temp = events[0].eventRequests.indexOf(userEmail);
                events[0].eventRequests.splice(temp, 1);
                events[0].eventRequestsName.splice(temp, 1);
                events[0].eventMembers.push(userEmail);
                events[0].eventMembersName.push(userName);
                events[0].save();
            });

            callback({
                'response': "Event Joined Successfully",
                'res': true
            });


            break;
        case "Ignore Event":
                user.find({
                    email: userEmail
                }, function(err, users) {
                    var temp = users[0].eventRequests.indexOf(eventToken);
                    users[0].eventRequests.splice(temp, 1);
                    users[0].save();

                });

                events.find({
                    token: eventToken
                }, function(err, events_new) {
                    var temp = events_new[0].eventRequests.indexOf(userEmail);
                    events_new[0].eventRequests.splice(temp, 1);
                    events_new[0].eventRequestsName.splice(temp, 1);
                    events_new[0].save();
                });

                callback({
                    'response': "Event Ignored",
                    'res': true
                });
            break;
        case "Leave Event":

            user.find({
                email: userEmail
            }, function(err, users) {
                var temp = users[0].events.indexOf(eventToken);
                users[0].events.splice(temp, 1);
                users[0].save();

            });

            events.find({
                token: eventoken
            }, function(err, eventss) {
                var temp = eventss[0].eventMembers.indexOf(userEmail);
                eventss[0].eventMembers.splice(temp, 1);
                eventss[0].eventMembersName.splice(temp, 1);
                
                eventss[0].save();
            });

            callback({
                'response': "Event Left Successfully",
                'res': true
            });

            break;
        case "Delete Event":
            events.find({
                token: eventToken
            }).remove(function(err) {
                console.log("errrr" + err);
            });


            user.find({
                email: groupAdminEmail
            }, function(err, users) {
                var temp = users[0].events.indexOf(eventToken);
                users[0].events.splice(temp, 1);
                //users[0].save();

                var temp1 = users[0].adminEvents.indexOf(eventToken);
                users[0].adminEvents.splice(temp1, 1);
                users[0].save(function(err) {
                    console.log("User saved" + err);
                });

            });

          
                user.find({

                }, function(err, users) {
                    for(var i=0;i<users.length;i++){
                         var temp = users[i].events.indexOf(eventToken);
                            users[i].events.splice(temp, 1);
                            var temp1 = users[i].eventRequests.indexOf(eventToken);
                            users[i].eventRequests.splice(temp1, 1);

                            users[i].save();
                    }
                   
                });
            
            callback({
                'response': "Event Deleted Successfully",
                'res': true
            });
            break;
    }

}