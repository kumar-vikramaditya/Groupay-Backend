var crypto = require('crypto');
var rand = require('csprng');
var mongoose = require('mongoose');
var group = require('config/groupmodel');
var user = require('config/usermodel')


exports.create = function(groupName, groupMemberRequestEmail, groupAdminEmail, callback) {

    var token = crypto.createHash('sha512').update(groupName + groupAdminEmail + rand).digest("hex");

    var newgroup = new group({
        token: token,
        groupName: groupName,
        groupRequests: groupMemberRequestEmail,
        groupAdmin: groupAdminEmail,
        groupMembers: groupAdminEmail
    });

    group.find({
        token: token
    }, function(err, groups) {

        var len = groups.length;

        if (len == 0) {
            newgroup.save(function(err) {

                callback({
                    'response': "Group Sucessfully Created",
                    'res': true
                });

            });

            user.find({
                email: groupAdminEmail
            }, function(err, users) {
                users[0].adminGroups.push(newgroup.groupName);
                users[0].groups.push(newgroup.groupName);
                users[0].save(function(err) {
                    console.log("User saved");
                });
            });

            for (var requestMembers in groupMemberRequestEmail) {
                console.log("requestMembers" + groupMemberRequestEmail[requestMembers]);
                user.find({
                    email: groupMemberRequestEmail[requestMembers]
                }, function(err, users) {
                    users[0].groupRequests.push(newgroup.groupName);
                    users[0].save(function(err) {
                        console.log("User saved");
                    });
                });
            }
        } else {

            callback({
                'response': "Group already exists",
                'res': false
            });

        }
    });
}


exports.update = function(groupName, groupAdminEmail, userEmail, updateAction, callback) {

    var groupToken = crypto.createHash('sha512').update(groupName + groupAdminEmail + rand).digest("hex");

    switch (updateAction) {
        case "Join Group":
            user.find({
                email: userEmail[0]
            }, function(err, users) {
                var temp = users[0].groupRequests.indexOf(groupName);
                users[0].groupRequests.splice(temp, 1);
                users[0].groups.push(groupName);
                users[0].save();
            });

            group.find({
                token: groupToken
            }, function(err, groups) {
                var temp = groups[0].groupRequests.indexOf(userEmail[0]);
                groups[0].groupRequests.splice(temp, 1);
                groups[0].groupMembers.push(userEmail[0]);
                groups[0].save();
            });

            callback({
                'response': "Group Joined Successfully",
                'res': true
            });


            break;
        case "Leave Group":

            user.find({
                email: userEmail[0]
            }, function(err, users) {
                var temp = users[0].groups.indexOf(groupName);
                users[0].groups.splice(temp, 1);
                users[0].save();

            });

            group.find({
                token: groupToken
            }, function(err, groups) {
                var temp = groups[0].groupMembers.indexOf(userEmail[0]);
                groups[0].groupMembers.splice(temp, 1);
                groups[0].save();
            });

            callback({
                'response': "Group Left Successfully",
                'res': true
            });

            break;
        case "Delete Group":
            group.find({
                token: groupToken
            }).remove(function(err) {
                console.log("errrr" + err);
            });


            user.find({
                email: groupAdminEmail
            }, function(err, users) {
                var temp = users[0].groups.indexOf(groupName);
                users[0].groups.splice(temp, 1);
                //users[0].save();

                var temp1 = users[0].adminGroups.indexOf(groupName);
                users[0].adminGroups.splice(temp1, 1);
                users[0].save(function(err) {
                    console.log("User saved" + err);
                });

            });

            //console.log("userEmail11");
            for (var newTmp in userEmail) {
                //console.log("requestMembers"+userEmail[newTmp]);
                user.find({
                    email: userEmail[newTmp]
                }, function(err, users) {
                    var temp = users[0].groups.indexOf(groupName);
                    users[0].groups.splice(temp, 1);
                    var temp1 = users[0].groupRequests.indexOf(groupName);
                    users[0].groupRequests.splice(temp1, 1);

                    users[0].save();
                });
            }
            callback({
                'response': "Group Deleted Successfully",
                'res': true
            });
            break;
    }

}